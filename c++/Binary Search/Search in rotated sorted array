class Solution {
public:
int findpivot(vector<int>& nums,int n){
   //mean minimun /min element in the array 
   int l=0;
   int r=n-1;
   while(l<r){
    int mid=l+(r-l)/2;
    if(nums[mid]>nums[r]){
        l=mid+1;
    }
    else{
        r=mid;
    }
   }
   return r;
}

int bs(int l,int r,vector<int>& nums, int target){
  while(l<=r){
    int mid=l+(r-l)/2;
    if(nums[mid]==target){
         return mid;
    }
    else if(nums[mid]>target){
        r=mid-1;
    }
    else{
        l=mid+1;
    }
  }
  return -1;

}
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int pivot=findpivot(nums,n);
        
        int idx=bs(0,pivot-1,nums,target);
        if(idx!=-1) return idx;
        idx=bs(pivot,n-1,nums,target);
        return idx;

        
    }
};